import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import datetime as dt
import matplotlib.pyplot as plt

# ========================
# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï
# ========================
def download_data(tickers, start, end):
    data = yf.download(tickers, start=start, end=end)["Close"]
    return data.dropna()

def calculate_portfolio(data, weights):
    normalized = data / data.iloc[0]
    weighted = normalized.mul(weights, axis=1)
    portfolio = weighted.sum(axis=1)
    return portfolio

def calculate_performance(portfolio, risk_free_rate=0.02):
    daily_return = portfolio.pct_change().dropna()
    total_return = portfolio[-1] / portfolio[0] - 1
    annual_return = (1 + total_return) ** (252 / len(portfolio)) - 1
    annual_volatility = daily_return.std() * np.sqrt(252)
    sharpe_ratio = (annual_return - risk_free_rate) / annual_volatility
    return {
        "Total Return (%)": total_return * 100,
        "Annualized Return (%)": annual_return * 100,
        "Annualized Volatility (%)": annual_volatility * 100,
        "Sharpe Ratio": sharpe_ratio
    }

# ========================
# üìå Streamlit App
# ========================
st.title("üìä Portfolio Allocation Simulator")

st.markdown("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")

# --- Input ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
tickers_input = st.text_input("‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (Ticker) ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma ‡πÄ‡∏ä‡πà‡∏ô AAPL,MSFT,NVDA", "AAPL,MSFT,NVDA")
tickers = [x.strip().upper() for x in tickers_input.split(",") if x.strip() != ""]

weight_input = st.text_input("‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (%) ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 40,30,30", "40,30,30")
weights = [float(w.strip()) / 100 for w in weight_input.split(",")]

if len(tickers) != len(weights):
    st.error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Ticker ‡∏Å‡∏±‡∏ö Weight ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
    st.stop()

if sum(weights) != 1.0:
    st.warning(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏° = {sum(weights)*100:.2f}%, ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 100%")

# --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ---
end_date = dt.date.today()
start_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", dt.date(end_date.year - 5, 1, 1))

# --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ---
with st.spinner("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
    data = download_data(tickers, start_date, end_date)

if data.empty:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    st.stop()

portfolio = calculate_portfolio(data, weights)
performance = calculate_performance(portfolio)

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
st.subheader("üìà ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
st.line_chart(portfolio)

st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï")
st.write(pd.DataFrame(performance, index=["Portfolio"]).T)

# --- ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö SPY ---
spy = yf.download("SPY", start=start_date, end=end_date)["Close"]
spy = spy / spy.iloc[0]
comparison = pd.DataFrame({"Portfolio": portfolio / portfolio.iloc[0], "SPY": spy})
st.subheader("üìâ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏ä‡∏ô‡∏µ S&P 500")
st.line_chart(comparison)
