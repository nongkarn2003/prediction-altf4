import streamlit as st
import yfinance as yf
import pandas as pd
import pandas_datareader as pdr
from datetime import datetime, timedelta

stocks = ('SET50.BK','ADVANC.BK', 'AOT.BK', 'AWC.BK', 'BANPU.BK', 'BBL.BK', 'BDMS.BK', 'BEM.BK', 'BGRIM.BK', 'BH.BK', 'BTS.BK', 'CBG.BK', 'CENTEL.BK', 'COM7.BK', 'CPALL.BK', 'CPF.BK', 'CPN.BK', 'CRC.BK', 'DELTA.BK', 'EA.BK', 'EGCO.BK', 'GLOBAL.BK', 'GPSC.BK', 'GULF.BK', 'HMPRO.BK', 'INTUCH.BK', 'IVL.BK', 'KBANK.BK', 'KCE.BK', 'KTB.BK', 'KTC.BK', 'LH.BK', 'MINT.BK', 'MTC.BK', 'OR.BK', 'OSP.BK', 'PTT.BK', 'PTTEP.BK', 'PTTGC.BK', 'RATCH.BK', 'SAWAD.BK', 'SCB.BK', 'SCC.BK', 'SCGP.BK', 'TISCO.BK', 'TLI.BK', 'TOP.BK', 'TRUE.BK', 'TTB.BK', 'TU.BK', 'WHA.BK')

streamlit_style = """
<style>
@import url(https://fonts.googleapis.com/css2?family=Mitr:wght@200;300;400;500;600;700&display=swap);

* {
    font-family: 'Mitr', sans-serif;
}
.st-emotion-cache-1dp5vir {   
background-image: linear-gradient(90deg, rgb(0 0 0), rgb(0 0 0));
}
</style>
"""

st.markdown(streamlit_style, unsafe_allow_html=True)

st.header("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô")
st.write('‡∏™‡∏π‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Benjamin Graham')
ticker = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô", stocks)
ng_pe = st.text_input('PE ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 8.5)
multiplier = st.text_input('‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 2)
margin = st.text_input('‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (%)', 35)

def get_current_price(ticker_data):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"""
    quote = ticker_data.info
    
    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏¥‡∏•‡∏î‡πå
    price_fields = [
        "regularMarketPrice",
        "regularMarketPreviousClose", 
        "currentPrice",
        "ask",
        "bid",
        "previousClose"
    ]
    
    for field in price_fields:
        if field in quote and quote[field] is not None:
            try:
                price = float(quote[field])
                if price > 0:
                    return price
            except (ValueError, TypeError):
                continue
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å info ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ history
    try:
        hist = ticker_data.history(period="5d")
        if not hist.empty:
            return float(hist['Close'].iloc[-1])
    except Exception:
        pass
    
    return None

def get_eps(ticker_data):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ EPS"""
    quote = ticker_data.info
    
    eps_fields = [
        "trailingEps",
        "forwardEps", 
        "eps"
    ]
    
    for field in eps_fields:
        if field in quote and quote[field] is not None:
            try:
                eps = float(quote[field])
                if eps != 0:
                    return eps
            except (ValueError, TypeError):
                continue
    
    return None

def get_growth_rate(ticker_data):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"""
    quote = ticker_data.info
    
    growth_fields = [
        "earningsGrowth",
        "earningsQuarterlyGrowth",
        "revenueGrowth"
    ]
    
    for field in growth_fields:
        if field in quote and quote[field] is not None:
            try:
                growth = float(quote[field])
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
                if abs(growth) <= 1:
                    growth = growth * 100
                return growth
            except (ValueError, TypeError):
                continue
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 5%
    return 5.0

def get_aaa_yield():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ö‡∏≠‡∏ô‡∏î‡πå AAA"""
    try:
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ 10-year Treasury rate ‡πÅ‡∏ó‡∏ô AAA
        treasury_df = pdr.get_data_fred('DGS10', start=datetime.now() - timedelta(days=30))
        if not treasury_df.empty:
            current_yield = treasury_df.dropna().iloc[-1][0]
            return float(current_yield)
    except Exception:
        pass
    
    try:
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ AAA ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        aaa_df = pdr.get_data_fred('AAA', start=datetime.now() - timedelta(days=30))
        if not aaa_df.empty:
            current_yield = aaa_df.dropna().iloc[-1][0]
            return float(current_yield)
    except Exception:
        pass
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 4%
    return 4.0

def get_data(ticker, ng_pe, multiplier, margin):
    try:
        ticker_data = yf.Ticker(ticker)
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_price = get_current_price(ticker_data)
        if current_price is None:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á {ticker} ‡πÑ‡∏î‡πâ")
            return None
        
        # ‡∏î‡∏∂‡∏á EPS
        eps = get_eps(ticker_data)
        if eps is None:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EPS ‡∏Ç‡∏≠‡∏á {ticker} ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")
            eps = st.number_input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ EPS:", min_value=0.0, step=0.01)
            if eps == 0:
                return None
        
        # ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        growth_rate = get_growth_rate(ticker_data)
        
        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ö‡∏≠‡∏ô‡∏î‡πå
        current_yield = get_aaa_yield()
        
        output = {
            "current_price": float(current_price),
            "eps": float(eps),
            "growth_rate": float(growth_rate),
            "current_yield": float(current_yield),
            "ng_pe": float(ng_pe),
            "multiplier": float(multiplier),
            "margin": float(margin)
        }
        return output
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return None

if st.button('‡∏Ñ‡πç‡∏≤‡∏ô‡∏ß‡∏ì'):
    try:
        data = get_data(ticker, ng_pe, multiplier, margin)
        
        if data is not None:
            st.markdown("""---""")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric(label="EPS(‡∏ø)", value=f"{data['eps']:.2f}")
            with col2:
                st.metric(label="‡∏≠‡∏±‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (%)", value=f"{data['growth_rate']:.2f}")
            with col3:
                st.metric(label="‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ö‡∏≠‡∏ô‡∏î‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (%)", value=f"{data['current_yield']:.2f}")
            
            st.markdown("""---""")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
            # ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£ Benjamin Graham: V = EPS √ó (8.5 + 2g) √ó 4.4 / Y
            # ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà g = growth rate, Y = current yield
            growth_decimal = data["growth_rate"] / 100 if data["growth_rate"] > 1 else data["growth_rate"]
            yield_decimal = data["current_yield"] / 100 if data["current_yield"] > 1 else data["current_yield"]
            
            int_value = (data["eps"] * (data["ng_pe"] + data["multiplier"] * growth_decimal * 100) * 4.4) / data["current_yield"]
            int_value = round(int_value, 2)
            
            stock_price = round(data["current_price"], 2)
            margin_rate = data["margin"] / 100
            accept_price = (1 - margin_rate) * int_value
            accept_price = round(accept_price, 2)
            
            col4, col5, col6 = st.columns(3)
            with col4:
                st.subheader('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô(‡∏ø)')
                st.subheader(f"**:blue[{stock_price}]**")
            with col5:
                st.subheader('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á(‡∏ø)')
                st.subheader(f"**:blue[{int_value}]**")
            with col6:
                st.subheader('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ(‡∏ø)')
                st.subheader(f"**:blue[{accept_price}]**")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            st.markdown("""---""")
            if stock_price <= accept_price:
                st.success(f"üü¢ **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ã‡∏∑‡πâ‡∏≠**: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({stock_price} ‡∏ø) ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ({accept_price} ‡∏ø)")
            elif stock_price <= int_value:
                st.warning(f"üü° **‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤**: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({stock_price} ‡∏ø) ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á")
            else:
                st.error(f"üî¥ **‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({stock_price} ‡∏ø) ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ({int_value} ‡∏ø)")
                
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {str(e)}")
else:
    st.text("")
